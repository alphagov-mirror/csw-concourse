---
# csw_image_resource: &csw_image_resource
#   type: docker-image
#   source:
#     repository: gdscyber/csw-concourse-worker
#     tag: '1.2.1'

csw_image_resource: &csw_image_resource
  type: docker-image
  source:
    repository: coolteddy/ubuntu18
    tag: latest

success_notify: &success_notify
  put: notify
  params:
    channel: '#cyber-test-alerts'
    text: |
      CSW test pipeline job has completed. Check it out at:
      $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:
- name: csw-backend
  type: git
  source:
    uri: https://github.com/alphagov/csw-backend.git
    branch: master

- name: csw-configuration
  type: git
  source:
    private_key: |
        ((csw-config-ssh-key))
    uri: git@github.com:alphagov/csw-configuration.git
    branch: master

- name: notify
  type: slack-notification
  source:
    url: ((slack-webhook-cyber-test))

jobs:
- name: job-csw-test-build
  serial: true
  plan:
  - get: csw-backend
    trigger: false
  - get: csw-configuration
  - task: csw-build
    timeout: 30m
    config:
      platform: linux
      image_resource: *csw_image_resource
      inputs:
      - name: csw-backend
      - name: csw-configuration

      params:
        AWS_REGION: 'eu-west-1'
        ACCOUNT_ID: ((cyber-staging))
        ENVIRONMENT: 'concourse'
        CD_ROLE: ((cd-role))
        STAG_KMS: ((staging-kms-ssm))
      run:
        path: sh
        args:
        - -eu
        - -c
        - |
          apt-get update -y

          # set -x
          ssh-keygen -m PEM -t RSA -N "" -f /root/.ssh/${ENVIRONMENT}

          cd csw-backend/chalice
          pip install -r requirements-dev.txt

          # Unit test
          python -m unittest discover -v

          cd ../build
          npm install

          echo "assuming aws concourse role..."
          arn="arn:aws:iam::${ACCOUNT_ID}:role/${CD_ROLE}"
          eval $(aws-assume-role $arn)

          echo "saving private/public keys ..."
          prikey=`cat /root/.ssh/${ENVIRONMENT}`
          aws ssm put-parameter \
           --name "/csw/${ENVIRONMENT}/privatekey" \
           --value "$prikey" \
           --type SecureString \
           --key-id "${STAG_KMS}" \
           --overwrite \
           --region ${AWS_REGION}

           pubkey=`cat /root/.ssh/${ENVIRONMENT}.pub`
           aws ssm put-parameter \
            --name "/csw/${ENVIRONMENT}/publickey" \
            --value "$pubkey" \
            --type SecureString \
            --key-id "${STAG_KMS}" \
            --overwrite \
            --region ${AWS_REGION}

          echo "building csw ..."
          buildcsw 10.11 ${ENVIRONMENT} /root/.ssh/${ENVIRONMENT}.pub

    on_success:
      <<: *success_notify

- name: job-csw-test-deploy
  serial: true
  plan:
  - get: csw-backend
  - get: csw-configuration
  - task: csw-deploy
    timeout: 30m
    config:
      platform: linux
      image_resource: *csw_image_resource
      inputs:
      - name: csw-backend
      - name: csw-configuration
      params:
        AWS_REGION: 'eu-west-1'
        ACCOUNT_ID: ((cyber-staging))
        ENVIRONMENT: 'eliska'
        CD_ROLE: ((cd-role))
      run:
        path: sh
        args:
        - -eu
        - -c
        - |

          set -x

          apt-get install -y git

          # echo "get environment prefix and account id"
          # CONFIG_FILE=csw-configuration/environments/${ENVIRONMENT}/settings.json
          # PREFIX=`cat ${CONFIG_FILE} | jq .ip_16bit_prefix | tr -d '"'`
          # ACCOUNT_ID=`cat ${CONFIG_FILE} | jq .host_account_id | tr -d '"'`
          # echo "ACCOUNT ID ...${ACCOUNT_ID}"
          # echo "PREFIX ...${PREFIX}"

          echo "assuming aws concourse role..."
          arn="arn:aws:iam::${ACCOUNT_ID}:role/${CD_ROLE}"
          eval $(aws-assume-role $arn)

          echo "fetching private/public keys ..."
          getsshkey ${ENVIRONMENT} ${AWS_REGION}

          python3.6 -m venv my_env
          . my_env/bin/activate
          pip install wheel

          echo "installing requirements ..."
          cd csw-backend/chalice
          pip install -r requirements-dev.txt

          # Unit test
          # python -m unittest discover -v

          cd ../build
          npm install

          echo "loading csw enviroment..."
          # loadcsw ${PREFIX} ${ENVIRONMENT} /root/.ssh/${ENVIRONMENT}.pub
          loadcsw 10.9 ${ENVIRONMENT} /root/.ssh/${ENVIRONMENT}.pub

          echo "deploying csw enviroment..."
          deploycsw ${ENVIRONMENT}

    on_success:
      <<: *success_notify

- name: job-csw-test-cleanup
  serial: true
  plan:
  - get: csw-backend
  - task: csw-destroy
    timeout: 30m
    config:
      platform: linux
      image_resource: *csw_image_resource
      inputs:
      - name: csw-backend
      params:
        AWS_REGION: 'eu-west-1'
        ACCOUNT_ID: ((cyber-staging))
        ENVIRONMENT: 'concourse'
        CD_ROLE: ((cd-role))
      run:
        path: sh
        args:
        - -eu
        - -c
        - |

          echo "assuming aws concourse role..."
          arn="arn:aws:iam::${ACCOUNT_ID}:role/${CD_ROLE}"
          eval $(aws-assume-role $arn)

          echo "fetching private/public keys ..."
          getsshkey ${ENVIRONMENT} ${AWS_REGION}

          cd csw-backend/chalice
          pip install -r requirements-dev.txt

          cd ../build
          npm install

          echo "loading csw enviroment..."
          loadcsw 10.11 ${ENVIRONMENT} /root/.ssh/${ENVIRONMENT}.pub

          echo "deploying csw enviroment..."
          /usr/local/bin/gulp environment.cleanup --env=${ENVIRONMENT}

    on_success:
      <<: *success_notify
